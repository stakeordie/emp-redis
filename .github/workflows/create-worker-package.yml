name: Create Worker Package

on:
  push:
    branches: [main, master]
    paths:
      - "worker/**"
      - "core/**"
  workflow_dispatch: # Allow manual triggering

jobs:
  build-package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up temporary directories
        id: setup_dirs
        run: |
          TEMP_DIR=$(mktemp -d)
          PACKAGE_DIR="$TEMP_DIR/emp-redis-worker"
          echo "TEMP_DIR=$TEMP_DIR" >> $GITHUB_ENV
          echo "PACKAGE_DIR=$PACKAGE_DIR" >> $GITHUB_ENV
          mkdir -p "$PACKAGE_DIR/worker"
          mkdir -p "$PACKAGE_DIR/core/core_types"
          mkdir -p "$PACKAGE_DIR/core/interfaces"
          mkdir -p "$PACKAGE_DIR/core/utils"
          mkdir -p "$PACKAGE_DIR/scripts"
          echo "Temporary directories created: $TEMP_DIR, $PACKAGE_DIR"

      - name: Copy project files
        run: |
          echo "Copying files to ${{ env.PACKAGE_DIR }}"
          cp -r worker/* "${{ env.PACKAGE_DIR }}/worker/"
          cp core/message_models.py "${{ env.PACKAGE_DIR }}/core/"
          cp -r core/core_types/* "${{ env.PACKAGE_DIR }}/core/core_types/"
          cp -r core/interfaces/* "${{ env.PACKAGE_DIR }}/core/interfaces/"
          cp -r core/utils/* "${{ env.PACKAGE_DIR }}/core/utils/"
          cp worker/.env.example "${{ env.PACKAGE_DIR }}/.env.example"

      - name: Handle requirements.txt
        run: |
          echo "Handling requirements.txt"
          if [ -f "worker/requirements.txt" ]; then
            cp worker/requirements.txt "${{ env.PACKAGE_DIR }}/requirements.txt"
          else
            echo "Warning: worker/requirements.txt not found"
            # Create a minimal requirements file using echo
            echo "# EmProps Redis Worker Requirements" > "${{ env.PACKAGE_DIR }}/requirements.txt"
            echo "websockets>=12.0" >> "${{ env.PACKAGE_DIR }}/requirements.txt"
            echo "aiohttp>=3.8.4" >> "${{ env.PACKAGE_DIR }}/requirements.txt"
            echo "pydantic>=2.0.0" >> "${{ env.PACKAGE_DIR }}/requirements.txt"
            echo "asyncio>=3.4.3" >> "${{ env.PACKAGE_DIR }}/requirements.txt"
            echo "uuid>=1.30" >> "${{ env.PACKAGE_DIR }}/requirements.txt"
            echo "typing-extensions>=4.5.0" >> "${{ env.PACKAGE_DIR }}/requirements.txt"
            # Re-added python-dotenv for loading worker-specific .env file
            echo "python-dotenv>=1.0.0" >> "${{ env.PACKAGE_DIR }}/requirements.txt"
          fi

      - name: Create setup script
        run: |
          echo "Creating setup.sh"
          cat > "${{ env.PACKAGE_DIR }}/scripts/setup.sh" << 'EOF'
          #!/bin/bash
          # Setup script for EmProps Redis Worker

          # Install dependencies
          echo "Installing dependencies..."
          pip install -r requirements.txt

          echo "Setup complete!"
          echo "To start the worker, run: python worker/worker.py"
          EOF

          # Make setup script executable
          chmod +x "${{ env.PACKAGE_DIR }}/scripts/setup.sh"

      - name: Create README (Commented Out)
        run: |
          echo "Skipping README creation (commented out for debugging)"
          # Debug: Temporarily comment out README creation
          # # Create a README
          # cat > "${{ env.PACKAGE_DIR }}/README.md" << 'EOF'
          # # EmProps Redis Worker
          # 
          # This package contains a single worker component for the EmProps Redis system.
          # 
          # ## Setup
          # 
          # 1. Run the setup script to install dependencies:
          #    ```
          #    ./scripts/setup.sh
          #    ```
          #    
          # 2. Copy `.env.example` to `.env` and configure it (if not done by setup script):
          #    - Set REDIS_API_HOST to the hostname of your Redis Hub
          #    - Set REDIS_API_PORT to the port of your Redis Hub (default: 8001)
          #    - Set WORKER_ID to a unique identifier for this worker
          #    - Set WEBSOCKET_AUTH_TOKEN to match the token configured on the Redis Hub
          #    - Configure connector-specific variables as needed
          # 
          # 3. Run the worker:
          #    ```
          #    python worker/worker.py
          #    ```
          # 
          # ## Environment Variables
          # 
          # ### Core Variables
          # - REDIS_API_HOST: The hostname of the Redis Hub
          # - REDIS_API_PORT: The port of the Redis Hub (default: 8001)
          # - WORKER_ID: Unique identifier for this worker
          # - WEBSOCKET_AUTH_TOKEN: Authentication token for Redis Hub
          # - CONNECTORS: Comma-separated list of connectors to load (e.g., "comfyui,simulation")
          # 
          # ### ComfyUI Connector Variables
          # - COMFYUI_API_HOST: Hostname of the ComfyUI instance
          # - COMFYUI_API_PORT: Port of the ComfyUI instance
          # 
          # ### Simulation Connector Variables
          # - SIMULATION_ENABLED: Whether to enable the simulation connector
          # EOF

      - name: Create tarball and clean up
        run: |
          echo "Creating tarball in ${{ env.TEMP_DIR }}"
          cd "${{ env.TEMP_DIR }}"
          tar -czf emp-redis-worker.tar.gz emp-redis-worker
          echo "Moving tarball to workspace"
          mv emp-redis-worker.tar.gz $GITHUB_WORKSPACE/
          echo "Cleaning up ${{ env.TEMP_DIR }}"
          rm -rf "${{ env.TEMP_DIR }}"
          echo "Worker package created: emp-redis-worker.tar.gz"

      - name: Get version info
        id: version
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "version=${TIMESTAMP}-${COMMIT_SHA}" >> $GITHUB_OUTPUT

          # Create a manifest file with download information
          cat > worker-manifest.json << 'EOF'
          {
            "version": "${TIMESTAMP}-${COMMIT_SHA}",
            "commit": "${{ github.sha }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "download_url": "https://github.com/${{ github.repository }}/releases/download/worker-latest/emp-redis-worker.tar.gz"
          }
          EOF

      - name: Create Versioned Release
        id: create_versioned_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: worker-${{ steps.version.outputs.version }}
          name: Worker Package ${{ steps.version.outputs.version }}
          body: |
            Worker package for EmProps Redis system.

            Built from commit: ${{ github.sha }}
            Timestamp: ${{ steps.version.outputs.version }}
          files: |
            emp-redis-worker.tar.gz
            worker-manifest.json
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create/Update Latest Release
        id: create_latest_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: worker-latest
          name: Worker Package (Latest)
          body: |
            Latest worker package for EmProps Redis system.

            Built from commit: ${{ github.sha }}
            Timestamp: ${{ steps.version.outputs.version }}

            This is an automatically updated release that always points to the latest worker package.
          files: |
            emp-redis-worker.tar.gz
            worker-manifest.json
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
